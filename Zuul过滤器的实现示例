package com.lijun.zuul.filter;

import com.netflix.zuul.ZuulFilter;
import com.netflix.zuul.context.RequestContext;
import com.netflix.zuul.exception.ZuulException;
import org.apache.commons.lang.StringUtils;
import org.apache.http.HttpStatus;
import org.springframework.stereotype.Component;

import javax.servlet.http.HttpServletRequest;

@Component
public class LoginFilter extends ZuulFilter {

    /**
     * 过滤器的四个类型:pre route post error
     * @return
     */
    @Override
    public String filterType() {
        return "pre";
    }

    /**
     * 执行顺序，返回值越小，优先级越高，为了保证可扩展性(另一个过滤器来了可以先执行)，一般不会return 0或1
     * @return
     */
    @Override
    public int filterOrder() {
        return 10;
    }

    /**
     * 是否执行run方法，true执行
     * @return
     */
    @Override
    public boolean shouldFilter() {
        return true;
    }

    /**
     * 编写过滤器的业务逻辑
     * @return
     * @throws ZuulException
     */
    @Override
    public Object run() throws ZuulException {
        //初始化context上下文对象，必须使用zuul的对象
        RequestContext context = RequestContext.getCurrentContext();
        //首先获取request对象
        HttpServletRequest request = context.getRequest();
        //通过request对象获取参数
        String token = request.getParameter("token");
        if(StringUtils.isBlank(token)){//如果token为空，进行这个请求的拦截
             //拦截，不转发请求
            context.setSendZuulResponse(false);
            //设置响应状态码  HttpStatus中定义了各个情况下的响应状态码，这里使用401，身份未认证
            context.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED);
            //设置响应的提示
            context.setResponseBody("request error!");
        }
        //null表示该过滤器什么都不做
        return null;
    }
}

结果:http://localhost:10000/api/provided/user/2?token=x ，token不为空，可以执行该请求
    http://localhost:10000/api/provided/user/2?   token为空  request error!请求被拦截
    
    