Hystrix同样是Netflix的一个组件
Hystrix是Netflix开源的一个延迟和容错库，用于隔离访问远程服务，第三方库，防止出现级联失败
   
    @SpringBootApplication
    @EnableDiscoveryClient
    @EnableCircuitBreaker//开启熔断器       
    这三个注解可以用另一个组合注解@SpringCloudApplication注解来代替     
               
雪崩效应:               
               微服务中关系错综复杂，一个请求可能需要多个的微服务同时处理(例如前台买一个东西，后台既要调用支付服务，还要进行库的操作服务)
               如果支付服务发生异常，请求阻塞，用户不会得到响应，tomcat的这个线程也不会释放，后面越来越多的用户请求，调取支付服务，都会阻塞在这儿
               服务器支持的线程数和并发数有限，请求一直阻塞的话会导致服务器资源耗尽，其他服务都不可用，形成雪崩效应
Hystrix解决雪崩效应的手段:
    1.线程隔离
             Hystrix为每个依赖服务(后端的每个消费者服务)调用分配一个小的线程池，如果线程池已经满了，请求调用就会被拒绝，默认不采用排队，加速失败判定时间
                                 用户的请求将不再直接访问服务，而是通过线程池中的空闲线程来访问服务，如果线程池已满，或者请求超时，就会进行降级处理
             (服务降级:优先保证核心服务，非核心服务不可用或者弱可用)
                                 用户的请求故障时，不会被阻塞，更不会无休止的等待或看到系统崩溃，至少可以看到一个执行结果(例如返回友好的提示信息)
                                 服务降级虽然会导致请求失败，但是不会导致阻塞，而且最多会影响这个依赖服务对应的线程池中的资源，对其他服务无影响
                                     触发Hystrix服务降级的情况:
               1.线程池已满
               2.请求超时(超时或者线程池满了才发生熔断，但是不同于下面的服务熔断)
                                              请求超时示例:
                     a.引入依赖 
                               <dependency>
                                   <groupId>org.springframework.cloud</groupId>
                                   <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
                               </dependency>
                     b.properties配置(hystrix配置)
                                                        设置超时时间:Hystrix默认的超时时长为1s(请求超过1s时会返回错误信息)，通过配置修改这个超时时长
                        properties中；
                              hystrix.command.fault.execution.isolation.thread.timeoutInMilliseconds=6000
                              #开发环境可以不更改，生产环境要设置hystrix的超时时长为6000ms(不一定要6000，设置一个合适的不受延迟影响的值)
                              
                     c.main引导类添加注解
                              @SpringBootApplication
                              @EnableDiscoveryClient
                              @EnableCircuitBreaker//开启熔断器
                              public class LijunServiceCostumerApplication {
                     
                     controller中定义熔断的方法。熔断方法和被熔断的方法返回值，参数列表要一致
                         @GetMapping
                         @ResponseBody
                         @HystrixCommand(fallbackMethod = "queryByIdFallback")//自定义熔断后调用的方法
                         public User queryById(@RequestParam("id")Long id){
                         return this.restTemplate.getForObject("http://service-provided/user/"+id,User.class);//使用Ribbon时只需要直接return，不需要别的bean
                         }

                         public User queryByIdFallback(Long id){//熔断的方法
                             User user = new User();
                             user.setId(100L);
                             user.setUserName("ljj");
                             user.setName("服务器正忙，请稍后再试");
                             user.setPassWord("000");
                             return user;
                         }    这样关闭服务提供者后，打开服务消费者就得到了提示信息“服务器正忙”
                         
                                                       这 样为每个方法都写一个熔断方法太过复杂，编写一个全局的熔断方法为所有的消费者方法提供熔断信息
                       @DefaultProperties(defaultFallback ="DefaultFallback" )//定义全局的默认熔断方法
                       public class UserController {
                       
                             @GetMapping
                             @ResponseBody
                             @HystrixCommand //声明这个方法需要熔断
                             public User queryById(@RequestParam("id")Long id){            
                                          
                             public String DefaultFallback(){//因为是全局的熔断方法，所以不能指定输入类型
                                return "服务器正忙，请稍后再试";
                              }
                                                         这样就设置好了全局默认的熔断方法，给要添加熔断的服务方法添加的@HystrixCommand//声明这个方法需要熔断
                                                         就会使用默认的熔断方法，指定了(fallbackMethod = xxx)就会使用自定义的熔断方法
                                 
    2.服务熔断
        熔断器，也叫断路器CirCuitBreaker，分布式系统中，服务消费方能自主判断某个服务慢或者存在大量的超时的情况，能够主动的熔断，防止整个系统被拖垮
        不同于电路的熔断，Hystrix可以实现弹性容错。在情况好转之后可以自动重连，通过断路的方式，将后续的请求拒绝掉，一段时间后允许部分请求通过，
        如果调用断路的服务成功，则回到线路闭合状态，否则继续保持断开状态
                    熔断状态机3个状态:
           1.Closed:关闭状态，线路联通，所有请求正常访问
           2.Open:打开状态，所有请求都会被降级，Hystrix会对请求情况计数，一定时间内失败请求百分比达到阈值(失败占比50%或不小于20次)就会触发熔断，打开熔断器
                                                默认的失败请求百分比为50%或者失败请求次数最少为20次
           3.HalfOpen:半开状态，open状态不是永久的，打开后会进入休眠状态(默认为5s)，然后断路器会进入半开状态，释放部分请求通过
                                        如果这些通过的请求都是健康的，就会完全关闭断路器，否则继续打开熔断器(Open状态)，然后再次进行休眠计时，5后再通过一部分请求，再判断，如此往复
                                        通过Customer的Controller:
                           public String queryById(@RequestParam("id")Long id){
                           if (id==1){//如果输入ID为1就抛出异常，测试熔断的半开状态
                               throw new RuntimeException();
                           }
                           return this.restTemplate.getForObject("http://service-provided/user/"+id,String.class);//使用Ribbon时只需要直接return，不需要别的bean
                           }   在web访问http://localhost/customer/?id=1就会抛出异常，打开熔断，然后进入半开状态，
                                                                                       然后http://localhost/customer/?id=2，打开起5s内还是报错，5s后就已经连通了
                                                                                       
                                                                                       
                    通过properties的配置来更改熔断的除法条件:
                    circuitbreaker.requestVolumeThreshold=10
                    #触发熔断的最小失败请求次数，默认为20，这里修改为10
                    circuitbreaker.errorThresholdPercentage=50
                    #熔断的阈值(失败请求所占的最小百分比)，默认为50%
                    circuitbreaker.sleepWindowInMilliseconds=10000
                    #休眠时长:默认为5s，5s过后进入半开状态                                                                   
                                                                                       
                                                                                       
                                                                                       
                    